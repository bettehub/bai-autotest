# 사용자 정의 테스트 템플릿 예시
# 이 파일을 사용하여 원하는 언어/프레임워크의 테스트를 생성할 수 있습니다

name: "Custom Test Template"
language: kotlin
framework: kotest
file_extension: ".kt"

# 패키지 선언
package: "package ${package_name}"

# import 문
imports: |
  import io.kotest.core.spec.style.DescribeSpec
  import io.kotest.matchers.shouldBe
  import io.kotest.matchers.shouldNotBe
  import io.ktor.client.*
  import io.ktor.client.engine.cio.*
  import io.ktor.client.request.*
  import io.ktor.client.statement.*
  import io.ktor.http.*

# 클래스 시작
class_start: |
  class ${test_name} : DescribeSpec({
      val client = HttpClient(CIO)
      val baseUrl = "${base_url}"

# 클래스 끝
class_end: "  })"

# 테스트 메서드 시작
test_start: |
      describe("${description}") {
          it("${method_name}") {

# 테스트 메서드 끝
test_end: |
          }
      }

# 각 단계별 템플릿
user_action: |
              // 사용자 액션: ${action}
              // UI 테스트 코드 추가

api_call: |
              // API 호출: ${method} ${endpoint}
              val response = client.${method_lower}("$baseUrl${endpoint}") {
                  contentType(ContentType.Application.Json)
                  setBody(${payload})
              }
              response.status shouldBe HttpStatusCode.OK

assertion: |
              // 검증: ${description}
              response.bodyAsText() shouldNotBe null
              response.bodyAsText().contains("${expected}") shouldBe true

navigation: |
              // 네비게이션: ${action}
              // 페이지 이동 확인

wait: |
              // 대기: ${timeout}ms
              kotlinx.coroutines.delay(${timeout})

note: |
              // 노트: ${description}

# 변수 설명:
# ${test_name} - 테스트 클래스 이름 (PascalCase)
# ${method_name} - 테스트 메서드 이름 (camelCase)
# ${description} - 테스트 설명
# ${action} - 사용자 액션 설명
# ${method} - HTTP 메서드 (GET, POST, PUT, DELETE)
# ${method_lower} - HTTP 메서드 소문자
# ${endpoint} - API 엔드포인트
# ${payload} - 요청 페이로드
# ${expected} - 예상 결과
# ${timeout} - 대기 시간 (ms)
# ${base_url} - 기본 URL
# ${package_name} - 패키지 이름